#!/usr/bin/python2

# Check if an OpenVPN server runs on a given UDP port.
#
# Copyright 2013 Roland Wolters, credativ GmbH
#
# Version 20150628
#
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to
# the following conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

import sys
import socket
import binascii
from optparse import OptionParser

def ok(msg):
    print "OK: %s" % msg
    sys.exit(0)

def critical(msg):
    print "CRITICAL: %s" % msg
    sys.exit(2)

def unknown(msg):
    print "UNKNOWN: %s" % msg
    sys.exit(3)

def checkserver(host,port,tcp,timeout):
    byte_stream = "\x38\x01\x00\x00\x00\x00\x00\x00\x00"

    if tcp:
        ovpn_sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    else:
        ovpn_sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)

    ovpn_sock.settimeout(timeout)

    try:
        ovpn_sock.sendto(byte_stream,(host,port))
        data, addr = ovpn_sock.recvfrom(1024) # buffer size is 1024 bytes
        reply = binascii.hexlify(data)
        if tcp:
            ok("OpenVPN tcp port reachable.")
        else:
            ok("OpenVPN server response (hex): %s" % reply)
    except socket.timeout:
        unknown("Request timed out")
        ovpn_sock.close()
    except (socket.error, Exception):
        critical("OpenVPN server not responding")
        ovpn_sock.close()

    ovpn_sock.close()
    return data

def main():
  usage = 'usage: %prog -H vpn.example.com'
  parser = OptionParser(usage=usage)
  parser.add_option('-p', '--port', type='int', dest='port', default='1194', help='Set port number (default is %default)')
  parser.add_option('-t', '--timeout', type='int', dest='timeout', default='5', help='Set timeout (default is %default)')
  parser.add_option('--tcp', action='store_true', dest='tcp', help='Use TCP instead of UDP')
  parser.add_option('-H', '--host', type='str', dest='host', help='OpenVPN host name or IP')
  (options, args) = parser.parse_args()
  if not options.host:
    parser.print_help()
    sys.exit(0)
  data = checkserver(options.host,options.port,options.tcp,options.timeout)

if __name__ == "__main__":
    main()
    